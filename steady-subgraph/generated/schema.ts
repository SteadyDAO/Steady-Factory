// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Platform extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalValueLocked", Value.fromBigInt(BigInt.zero()));
    this.set("totalSplit", Value.fromBigInt(BigInt.zero()));
    this.set("totalMerged", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Platform entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Platform must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Platform", id.toString(), this);
    }
  }

  static load(id: string): Platform | null {
    return changetype<Platform | null>(store.get("Platform", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalValueLocked(): BigInt {
    let value = this.get("totalValueLocked");
    return value!.toBigInt();
  }

  set totalValueLocked(value: BigInt) {
    this.set("totalValueLocked", Value.fromBigInt(value));
  }

  get totalSplit(): BigInt {
    let value = this.get("totalSplit");
    return value!.toBigInt();
  }

  set totalSplit(value: BigInt) {
    this.set("totalSplit", Value.fromBigInt(value));
  }

  get totalMerged(): BigInt {
    let value = this.get("totalMerged");
    return value!.toBigInt();
  }

  set totalMerged(value: BigInt) {
    this.set("totalMerged", Value.fromBigInt(value));
  }
}

export class Alchemist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("alchemist", Value.fromBytes(Bytes.empty()));
    this.set("elixir", Value.fromString(""));
    this.set("chyme", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Alchemist entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Alchemist must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Alchemist", id.toString(), this);
    }
  }

  static load(id: string): Alchemist | null {
    return changetype<Alchemist | null>(store.get("Alchemist", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get alchemist(): Bytes {
    let value = this.get("alchemist");
    return value!.toBytes();
  }

  set alchemist(value: Bytes) {
    this.set("alchemist", Value.fromBytes(value));
  }

  get elixir(): string {
    let value = this.get("elixir");
    return value!.toString();
  }

  set elixir(value: string) {
    this.set("elixir", Value.fromString(value));
  }

  get chyme(): string {
    let value = this.get("chyme");
    return value!.toString();
  }

  set chyme(value: string) {
    this.set("chyme", Value.fromString(value));
  }
}

export class Chyme extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("priceOracle", Value.fromBytes(Bytes.empty()));
    this.set("steadyToken", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Chyme entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Chyme must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Chyme", id.toString(), this);
    }
  }

  static load(id: string): Chyme | null {
    return changetype<Chyme | null>(store.get("Chyme", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get priceOracle(): Bytes {
    let value = this.get("priceOracle");
    return value!.toBytes();
  }

  set priceOracle(value: Bytes) {
    this.set("priceOracle", Value.fromBytes(value));
  }

  get steadyToken(): Bytes {
    let value = this.get("steadyToken");
    return value!.toBytes();
  }

  set steadyToken(value: Bytes) {
    this.set("steadyToken", Value.fromBytes(value));
  }

  get alchemist(): string | null {
    let value = this.get("alchemist");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set alchemist(value: string | null) {
    if (!value) {
      this.unset("alchemist");
    } else {
      this.set("alchemist", Value.fromString(<string>value));
    }
  }
}

export class Elixir extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromI32(0));
    this.set("ratioOfSteady", Value.fromBigInt(BigInt.zero()));
    this.set("forgeConstant", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("vault", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Elixir entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Elixir must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Elixir", id.toString(), this);
    }
  }

  static load(id: string): Elixir | null {
    return changetype<Elixir | null>(store.get("Elixir", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get ratioOfSteady(): BigInt {
    let value = this.get("ratioOfSteady");
    return value!.toBigInt();
  }

  set ratioOfSteady(value: BigInt) {
    this.set("ratioOfSteady", Value.fromBigInt(value));
  }

  get forgeConstant(): BigInt {
    let value = this.get("forgeConstant");
    return value!.toBigInt();
  }

  set forgeConstant(value: BigInt) {
    this.set("forgeConstant", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get dateSplit(): BigInt | null {
    let value = this.get("dateSplit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateSplit(value: BigInt | null) {
    if (!value) {
      this.unset("dateSplit");
    } else {
      this.set("dateSplit", Value.fromBigInt(<BigInt>value));
    }
  }

  get dateMerged(): BigInt | null {
    let value = this.get("dateMerged");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dateMerged(value: BigInt | null) {
    if (!value) {
      this.unset("dateMerged");
    } else {
      this.set("dateMerged", Value.fromBigInt(<BigInt>value));
    }
  }

  get chyme(): string | null {
    let value = this.get("chyme");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chyme(value: string | null) {
    if (!value) {
      this.unset("chyme");
    } else {
      this.set("chyme", Value.fromString(<string>value));
    }
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("chyme", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get chyme(): string {
    let value = this.get("chyme");
    return value!.toString();
  }

  set chyme(value: string) {
    this.set("chyme", Value.fromString(value));
  }
}
