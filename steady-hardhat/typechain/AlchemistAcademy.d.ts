/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AlchemistAcademyInterface extends ethers.utils.Interface {
  functions: {
    "DAOAddress()": FunctionFragment;
    "MINTER_ROLE()": FunctionFragment;
    "alchemistImpl()": FunctionFragment;
    "chymeList(address)": FunctionFragment;
    "createNewChyme((uint8,uint8,uint8,address,address,string,uint256,address),address)": FunctionFragment;
    "getChymeInfo(address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "priceFromOracle(address)": FunctionFragment;
    "setChymeInfo(address,(uint8,uint8,uint8,address,address,string,uint256,address))": FunctionFragment;
    "steadyImpl()": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAOAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alchemistImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chymeList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createNewChyme",
    values: [
      {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChymeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFromOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChymeInfo",
    values: [
      string,
      {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "steadyImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DAOAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "alchemistImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chymeList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewChyme",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChymeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChymeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "steadyImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "AlchemistForged(address,address,uint8,address)": EventFragment;
    "Chymed(address,uint256,uint256,string)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AlchemistForged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Chymed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type AlchemistForgedEvent = TypedEvent<
  [string, string, number, string] & {
    alchemist: string;
    priceOracle: string;
    fees: number;
    steadyImplForChyme: string;
  }
>;

export type ChymedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    chyme: string;
    fees: BigNumber;
    approvalStatus: BigNumber;
    symbol: string;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export class AlchemistAcademy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AlchemistAcademyInterface;

  functions: {
    DAOAddress(overrides?: CallOverrides): Promise<[string]>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    alchemistImpl(overrides?: CallOverrides): Promise<[string]>;

    chymeList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, string, string, string, BigNumber, string] & {
        decimals: number;
        fees: number;
        DAOApproved: number;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumber;
        steadyDAOReward: string;
      }
    >;

    createNewChyme(
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChymeInfo(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, string, string, string] & {
        oracleAddress: string;
        fees: number;
        decimals: number;
        timeToMaturity: BigNumber;
        symbol: string;
        steadyImplForChyme: string;
        steadyDAOReward: string;
      }
    >;

    initialize(
      _steadyImpl: string,
      _treasury: string,
      _alchemistImpl: string,
      _DAOAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    setChymeInfo(
      _chyme: string,
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    steadyImpl(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  DAOAddress(overrides?: CallOverrides): Promise<string>;

  MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

  alchemistImpl(overrides?: CallOverrides): Promise<string>;

  chymeList(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, string, string, string, BigNumber, string] & {
      decimals: number;
      fees: number;
      DAOApproved: number;
      oracleAddress: string;
      steadyImplForChyme: string;
      symbol: string;
      timeToMaturity: BigNumber;
      steadyDAOReward: string;
    }
  >;

  createNewChyme(
    _iChyme: {
      decimals: BigNumberish;
      fees: BigNumberish;
      DAOApproved: BigNumberish;
      oracleAddress: string;
      steadyImplForChyme: string;
      symbol: string;
      timeToMaturity: BigNumberish;
      steadyDAOReward: string;
    },
    _chyme: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChymeInfo(
    _chyme: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, BigNumber, string, string, string] & {
      oracleAddress: string;
      fees: number;
      decimals: number;
      timeToMaturity: BigNumber;
      symbol: string;
      steadyImplForChyme: string;
      steadyDAOReward: string;
    }
  >;

  initialize(
    _steadyImpl: string,
    _treasury: string,
    _alchemistImpl: string,
    _DAOAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceFromOracle(
    _priceOracle: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setChymeInfo(
    _chyme: string,
    _iChyme: {
      decimals: BigNumberish;
      fees: BigNumberish;
      DAOApproved: BigNumberish;
      oracleAddress: string;
      steadyImplForChyme: string;
      symbol: string;
      timeToMaturity: BigNumberish;
      steadyDAOReward: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  steadyImpl(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DAOAddress(overrides?: CallOverrides): Promise<string>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<string>;

    alchemistImpl(overrides?: CallOverrides): Promise<string>;

    chymeList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, string, string, string, BigNumber, string] & {
        decimals: number;
        fees: number;
        DAOApproved: number;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumber;
        steadyDAOReward: string;
      }
    >;

    createNewChyme(
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getChymeInfo(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, string, string, string] & {
        oracleAddress: string;
        fees: number;
        decimals: number;
        timeToMaturity: BigNumber;
        symbol: string;
        steadyImplForChyme: string;
        steadyDAOReward: string;
      }
    >;

    initialize(
      _steadyImpl: string,
      _treasury: string,
      _alchemistImpl: string,
      _DAOAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChymeInfo(
      _chyme: string,
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    steadyImpl(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AlchemistForged(address,address,uint8,address)"(
      alchemist?: string | null,
      priceOracle?: null,
      fees?: null,
      steadyImplForChyme?: null
    ): TypedEventFilter<
      [string, string, number, string],
      {
        alchemist: string;
        priceOracle: string;
        fees: number;
        steadyImplForChyme: string;
      }
    >;

    AlchemistForged(
      alchemist?: string | null,
      priceOracle?: null,
      fees?: null,
      steadyImplForChyme?: null
    ): TypedEventFilter<
      [string, string, number, string],
      {
        alchemist: string;
        priceOracle: string;
        fees: number;
        steadyImplForChyme: string;
      }
    >;

    "Chymed(address,uint256,uint256,string)"(
      chyme?: null,
      fees?: null,
      approvalStatus?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        chyme: string;
        fees: BigNumber;
        approvalStatus: BigNumber;
        symbol: string;
      }
    >;

    Chymed(
      chyme?: null,
      fees?: null,
      approvalStatus?: null,
      symbol?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        chyme: string;
        fees: BigNumber;
        approvalStatus: BigNumber;
        symbol: string;
      }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;
  };

  estimateGas: {
    DAOAddress(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    alchemistImpl(overrides?: CallOverrides): Promise<BigNumber>;

    chymeList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createNewChyme(
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChymeInfo(_chyme: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _steadyImpl: string,
      _treasury: string,
      _alchemistImpl: string,
      _DAOAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setChymeInfo(
      _chyme: string,
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    steadyImpl(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DAOAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alchemistImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chymeList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewChyme(
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChymeInfo(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _steadyImpl: string,
      _treasury: string,
      _alchemistImpl: string,
      _DAOAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setChymeInfo(
      _chyme: string,
      _iChyme: {
        decimals: BigNumberish;
        fees: BigNumberish;
        DAOApproved: BigNumberish;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumberish;
        steadyDAOReward: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    steadyImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
