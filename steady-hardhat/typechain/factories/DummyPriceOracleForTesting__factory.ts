/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DummyPriceOracleForTesting,
  DummyPriceOracleForTestingInterface,
} from "../DummyPriceOracleForTesting";

const _abi = [
  {
    inputs: [],
    name: "getLatestPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_latestAnswer",
        type: "int256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_price",
        type: "int256",
      },
    ],
    name: "setLatestPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c806304ea97b014604b57806350d25bcd14605d578063805fe7fb1460775780638e15f473146087575b600080fd5b605b6056366004608e565b600155565b005b606560015481565b60405190815260200160405180910390f35b605b6082366004608e565b600055565b6000546065565b600060208284031215609f57600080fd5b503591905056fea2646970667358221220baacc17da40d79564b894f1e6eec73c39dba2596f28677e6405b1a70ed415d6564736f6c63430008100033";

export class DummyPriceOracleForTesting__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DummyPriceOracleForTesting> {
    return super.deploy(overrides || {}) as Promise<DummyPriceOracleForTesting>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DummyPriceOracleForTesting {
    return super.attach(address) as DummyPriceOracleForTesting;
  }
  connect(signer: Signer): DummyPriceOracleForTesting__factory {
    return super.connect(signer) as DummyPriceOracleForTesting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyPriceOracleForTestingInterface {
    return new utils.Interface(_abi) as DummyPriceOracleForTestingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyPriceOracleForTesting {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DummyPriceOracleForTesting;
  }
}
