/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Treasure, TreasureInterface } from "../Treasure";

const _abi = [
  {
    inputs: [],
    name: "generateHeader",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "timeLeft",
        type: "string",
      },
      {
        internalType: "string",
        name: "to",
        type: "string",
      },
    ],
    name: "generateTreasureChest",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6109dc61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c80631d99691d14610045578063589b7e5214610063575b600080fd5b61004d610076565b60405161005a919061032d565b60405180910390f35b61004d610071366004610403565b6102b1565b606060405160200161029d907f3c73766720636c6173733d22737667426f6479222077696474683d223330302281527f206865696768743d22333030222076696577426f783d2230203020333030203360208201527f30302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32303060408201527f302f737667223e0000000000000000000000000000000000000000000000000060608201527f3c7374796c653e3c215b43444154415b73766720746578747b7374726f6b653a60678201527f6e6f6e657d5d5d3e3c2f7374796c653e0000000000000000000000000000000060878201527f3c7374796c6520747970653d22746578742f637373223e00000000000000000060978201527f2e7374307b66696c6c3a234646464646463b7d2e7374317b646973706c61793a60ae8201527f6e6f6e653b66696c6c3a6e6f6e653b7374726f6b653a234646464646463b737460ce8201527f726f6b652d77696474683a302e353b7d0000000000000000000000000000000060ee8201527f3c6c696e6520636c6173733d22737437222078313d22323535222079313d223960fe8201527f30222078323d22323535222079323d22333030222f3e0000000000000000000061011e8201527f3c6c696e6520636c6173733d22737438222078313d223237352e32222079313d6101348201527f223930222078323d223237352e32222079323d22333030222f3e00000000000061015482015261016e0190565b604051602081830303815290604052905090565b606081836040516020016102c6929190610483565b604051602081830303815290604052905092915050565b60005b838110156102f85781810151838201526020016102e0565b50506000910152565b600081518084526103198160208601602086016102dd565b601f01601f19169290920160200192915050565b6020815260006103406020830184610301565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261038757600080fd5b813567ffffffffffffffff808211156103a2576103a2610347565b604051601f8301601f19908116603f011681019082821181831017156103ca576103ca610347565b816040528381528660208588010111156103e357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561041657600080fd5b823567ffffffffffffffff8082111561042e57600080fd5b61043a86838701610376565b9350602085013591508082111561045057600080fd5b5061045d85828601610376565b9150509250929050565b600081516104798185602086016102dd565b9290920192915050565b7f3c7061746820636c6173733d22737432302220643d224d38372e342c33322e3981527f76346831302e3163302e332c302c302e352c302e312c302e372c302e3363302e60208201527f322c302e322c302e332c302e352c302e332c302e3763302c302e332d302e312c60408201527f302e352d302e332c302e38202020204339382c33382e392c39372e382c33392c60608201527f39372e352c33394838362e33632d302e332c302d302e352d302e312d302e382d60808201527f302e33632d302e322d302e322d302e332d302e352d302e332d302e385632352e60a08201527f3863302d302e332c302e312d302e352c302e332d302e372020202063302e322d60c08201527f302e322c302e352d302e332c302e382d302e336831312e3263302e332c302c3060e08201527f2e352c302e312c302e372c302e3363302e322c302e322c302e332c302e342c306101008201527f2e332c302e3763302c302e332d302e312c302e352d302e332c302e37632d302e6101208201527f322c302e322d302e352c302e332d302e372c302e33202020204838372e3476346101408201527f6831302e3163302e332c302c302e352c302e312c302e372c302e3363302e322c6101608201527f302e322c302e332c302e342c302e332c302e3763302c302e332d302e312c302e6101808201527f352d302e332c302e37632d302e322c302e322d302e352c302e332d302e372c306101a08201527f2e334838372e347a222f3e3c7061746820636c6173733d227374302220643d226101c08201527f4d3130322e382c3339632d302e332c302d302e352d302e312d302e382d302e336101e08201527f632d302e322d302e322d302e332d302e352d302e332d302e385632352e3863306102008201527f2d302e332c302e312d302e352c302e332d302e372020202063302e322d302e326102208201527f2c302e352d302e332c302e382d302e3363302e332c302c302e352c302e312c306102408201527f2e372c302e3363302e322c302e322c302e332c302e342c302e332c302e3776316102608201527f312e314831313463302e332c302c302e352c302e312c302e372c302e3363302e6102808201527f322c302e322c302e332c302e352c302e332c302e372020202063302c302e332d6102a08201527f302e312c302e352d302e332c302e38632d302e322c302e322d302e352c302e336102c08201527f2d302e372c302e33483130322e387a222f3e3c7265637420783d2234352220796102e08201527f3d22393022206865696768743d2235372220636c6173733d2273743230223e206103008201527f3c616e696d61746520617474726962757465547970653d22584d4c22206174746103208201527f7269627574654e616d653d227769647468222066726f6d3d22302220746f3d22610340820152600061099e61097561096f6108ae610360860188610467565b7f22206475723d223130732220726570656174436f756e743d22696e646566696e81527f697465222066696c6c3d22667265657a6522202f3e203c2f726563743e3c746560208201527f787420783d223130352220793d223132352220666f6e742d66616d696c793d2260408201527f417269616c2220666f6e742d73697a653d2231327078223e4d6174757265732060608201527f696e200000000000000000000000000000000000000000000000000000000000608082015260830190565b85610467565b7f20646179733c2f746578743e00000000000000000000000000000000000000008152600c0190565b94935050505056fea2646970667358221220dabdcea6eb50ed1a65ee4a16d41b0022cb952f0810b55d37089e1b725b219e1a64736f6c63430008100033";

export class Treasure__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Treasure> {
    return super.deploy(overrides || {}) as Promise<Treasure>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Treasure {
    return super.attach(address) as Treasure;
  }
  connect(signer: Signer): Treasure__factory {
    return super.connect(signer) as Treasure__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasureInterface {
    return new utils.Interface(_abi) as TreasureInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Treasure {
    return new Contract(address, _abi, signerOrProvider) as Treasure;
  }
}
