/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAcademyInterface extends ethers.utils.Interface {
  functions: {
    "DAOAddress()": FunctionFragment;
    "alchemistImpl()": FunctionFragment;
    "chymeList(address)": FunctionFragment;
    "elixirImpl()": FunctionFragment;
    "getChymeInfo(address)": FunctionFragment;
    "priceFromOracle(address)": FunctionFragment;
    "steadyDAOToken()": FunctionFragment;
    "steadyImpl()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAOAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "alchemistImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chymeList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "elixirImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChymeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFromOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "steadyDAOToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "steadyImpl",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DAOAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "alchemistImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chymeList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "elixirImpl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChymeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "steadyDAOToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "steadyImpl", data: BytesLike): Result;

  events: {};
}

export class IAcademy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAcademyInterface;

  functions: {
    DAOAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    alchemistImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chymeList(
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    elixirImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChymeInfo(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, string, string, string] & {
        oracleAddress: string;
        fees: number;
        decimals: number;
        timeToMaturity: BigNumber;
        symbol: string;
        steadyImplForChyme: string;
        steadyDAOReward: string;
      }
    >;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    steadyDAOToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    steadyImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAOAddress(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  alchemistImpl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chymeList(
    _chyme: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  elixirImpl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChymeInfo(
    _chyme: string,
    overrides?: CallOverrides
  ): Promise<
    [string, number, number, BigNumber, string, string, string] & {
      oracleAddress: string;
      fees: number;
      decimals: number;
      timeToMaturity: BigNumber;
      symbol: string;
      steadyImplForChyme: string;
      steadyDAOReward: string;
    }
  >;

  priceFromOracle(
    _priceOracle: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  steadyDAOToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  steadyImpl(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAOAddress(overrides?: CallOverrides): Promise<void>;

    alchemistImpl(overrides?: CallOverrides): Promise<void>;

    chymeList(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, string, string, string, BigNumber, string] & {
        decimals: number;
        fees: number;
        DAOApproved: number;
        oracleAddress: string;
        steadyImplForChyme: string;
        symbol: string;
        timeToMaturity: BigNumber;
        steadyDAOReward: string;
      }
    >;

    elixirImpl(overrides?: CallOverrides): Promise<void>;

    getChymeInfo(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<
      [string, number, number, BigNumber, string, string, string] & {
        oracleAddress: string;
        fees: number;
        decimals: number;
        timeToMaturity: BigNumber;
        symbol: string;
        steadyImplForChyme: string;
        steadyDAOReward: string;
      }
    >;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    steadyDAOToken(overrides?: CallOverrides): Promise<void>;

    steadyImpl(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DAOAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    alchemistImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chymeList(
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    elixirImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChymeInfo(_chyme: string, overrides?: CallOverrides): Promise<BigNumber>;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    steadyDAOToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    steadyImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAOAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    alchemistImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chymeList(
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    elixirImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChymeInfo(
      _chyme: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFromOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    steadyDAOToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    steadyImpl(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
