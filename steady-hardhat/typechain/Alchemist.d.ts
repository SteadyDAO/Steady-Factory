/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AlchemistInterface extends ethers.utils.Interface {
  functions: {
    "academy()": FunctionFragment;
    "chyme()": FunctionFragment;
    "elixirImpl()": FunctionFragment;
    "getChyme()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "merge(uint256)": FunctionFragment;
    "split(uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "academy", values?: undefined): string;
  encodeFunctionData(functionFragment: "chyme", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "elixirImpl",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getChyme", values?: undefined): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "merge", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "academy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chyme", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "elixirImpl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChyme", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;

  events: {
    "ElixirCreated(uint256,uint8,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Merge(uint256,address,uint256)": EventFragment;
    "Split(address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ElixirCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Merge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Split"): EventFragment;
}

export type ElixirCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber] & {
    tokenId: BigNumber;
    ratio: number;
    forgePrice: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MergeEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    mergedAmount: BigNumber;
    chyme: string;
    tokenid: BigNumber;
  }
>;

export type SplitEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    source: string;
    splitAmount: BigNumber;
    chymeVaultDeployed: string;
    chyme: string;
    tokenid: BigNumber;
  }
>;

export class Alchemist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AlchemistInterface;

  functions: {
    academy(overrides?: CallOverrides): Promise<[string]>;

    chyme(overrides?: CallOverrides): Promise<[string]>;

    elixirImpl(overrides?: CallOverrides): Promise<[string]>;

    getChyme(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    merge(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    split(
      amount: BigNumberish,
      ratioOfSteady: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  academy(overrides?: CallOverrides): Promise<string>;

  chyme(overrides?: CallOverrides): Promise<string>;

  elixirImpl(overrides?: CallOverrides): Promise<string>;

  getChyme(overrides?: CallOverrides): Promise<string>;

  initialize(
    _chyme: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  merge(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  split(
    amount: BigNumberish,
    ratioOfSteady: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    academy(overrides?: CallOverrides): Promise<string>;

    chyme(overrides?: CallOverrides): Promise<string>;

    elixirImpl(overrides?: CallOverrides): Promise<string>;

    getChyme(overrides?: CallOverrides): Promise<string>;

    initialize(_chyme: string, overrides?: CallOverrides): Promise<void>;

    merge(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    split(
      amount: BigNumberish,
      ratioOfSteady: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ElixirCreated(uint256,uint8,uint256)"(
      tokenId?: null,
      ratio?: null,
      forgePrice?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber],
      { tokenId: BigNumber; ratio: number; forgePrice: BigNumber }
    >;

    ElixirCreated(
      tokenId?: null,
      ratio?: null,
      forgePrice?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber],
      { tokenId: BigNumber; ratio: number; forgePrice: BigNumber }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Merge(uint256,address,uint256)"(
      mergedAmount?: null,
      chyme?: null,
      tokenid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { mergedAmount: BigNumber; chyme: string; tokenid: BigNumber }
    >;

    Merge(
      mergedAmount?: null,
      chyme?: null,
      tokenid?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { mergedAmount: BigNumber; chyme: string; tokenid: BigNumber }
    >;

    "Split(address,uint256,address,address,uint256)"(
      source?: string | null,
      splitAmount?: null,
      chymeVaultDeployed?: null,
      chyme?: null,
      tokenid?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        source: string;
        splitAmount: BigNumber;
        chymeVaultDeployed: string;
        chyme: string;
        tokenid: BigNumber;
      }
    >;

    Split(
      source?: string | null,
      splitAmount?: null,
      chymeVaultDeployed?: null,
      chyme?: null,
      tokenid?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        source: string;
        splitAmount: BigNumber;
        chymeVaultDeployed: string;
        chyme: string;
        tokenid: BigNumber;
      }
    >;
  };

  estimateGas: {
    academy(overrides?: CallOverrides): Promise<BigNumber>;

    chyme(overrides?: CallOverrides): Promise<BigNumber>;

    elixirImpl(overrides?: CallOverrides): Promise<BigNumber>;

    getChyme(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    merge(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    split(
      amount: BigNumberish,
      ratioOfSteady: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    academy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chyme(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    elixirImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChyme(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _chyme: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    merge(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    split(
      amount: BigNumberish,
      ratioOfSteady: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
